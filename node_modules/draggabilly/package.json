{
  "name": "draggabilly",
  "version": "1.1.1",
  "description": "make that shiz draggable",
  "main": "draggabilly.js",
  "dependencies": {
    "desandro-classie": "^1",
    "wolfy87-eventemitter": ">=3 <5",
    "eventie": "^1",
    "get-size": ">=1.1.4 <2",
    "desandro-get-style-property": "^1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.5.0",
    "grunt-requirejs": "^0.4.2"
  },
  "scripts": {
    "test": "grunt travis"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/desandro/draggabilly.git"
  },
  "keywords": [
    "DOM",
    "drag",
    "draggable",
    "touch",
    "multitouch"
  ],
  "author": {
    "name": "David DeSandro"
  },
  "license": "MIT",
  "readme": "# Draggabilly\n\n<p class=\"tagline\">Make that shiz draggable</p>\n\n[draggabilly.desandro.com](http://draggabilly.desandro.com)\n\nRad because it supports IE8+ and multi-touch.\n\n## Install\n\nGrab a packaged source file:\n\n+ [draggabilly.pkgd.min.js](http://draggabilly.desandro.com/draggabilly.pkgd.min.js) for production\n+ [draggabilly.pkgd.js](http://draggabilly.desandro.com/draggabilly.pkgd.js) for development\n\nInstall with [Bower](http://bower.io): `bower install draggabilly`\n\nInstall with npm: `npm install draggabilly`\n\n## Usage\n\n``` js\nvar elem = document.querySelector('#draggable');\nvar draggie = new Draggabilly( elem, {\n  // options...\n});\n```\n\nWhen dragging, Draggabillly will add the class `.is-dragging` to the element.\n\n## Options\n\n### axis\n\n**Type:** _String_\n\n**Values:** `'x'` or `'y'`\n\n``` js\naxis: 'x'\n```\n\nConstrains movement to horizontal or vertical axis.\n\n### containment\n\n**Type:** _Element_, Selector _String_, or _Boolean_\n\n``` js\ncontainment: '#container'\n```\n\nContains movement to the bounds of the element. If `true`, the container will be the parent element.\n\n### grid\n\n**Type:** _Array_\n\n**Values:** `[ x, y ]`\n\n``` js\ngrid: [ 20, 20 ]\n```\n\nSnaps the element to a grid, every x and y pixels.\n\n### handle\n\n**Type:** Selector _String_\n\n``` js\nhandle: '.handle'\n```\n\nSpecifies on what element the drag interaction starts.\n\n`handle` is useful for when you do not want all inner elements to be used for dragging, like inputs and forms. See [back handle example on CodePen](http://codepen.io/desandro/pen/znAuH).\n\n## Events\n\nDraggabilly is an Event Emitter. You can bind event listeners to events.\n\n``` js\nvar draggie = new Draggabilly( elem );\n\nfunction onDragMove( instance, event, pointer ) {\n  console.log( 'dragMove on ' + event.type +\n    pointer.pageX + ', ' + pointer.pageY +\n    ' position at ' + instance.position.x + ', ' + instance.position.y );\n}\n// bind event listener\ndraggie.on( 'dragMove', onDragMove );\n// un-bind event listener\ndraggie.off( 'dragMove', onDragMove );\n// return true to trigger an event listener just once\ndraggie.once( 'dragMove', function() {\n  console.log('Draggabilly did move, just once');\n});\n```\n\n### dragStart\n\n```js\n.on( 'dragStart', function( draggieInstance, event, pointer ) { //...\n```\n\n+ `draggieInstance` - **Type:** _Draggabilly_ - the Draggabilly instance\n+ `event` - **Type:** _Event_ - the original `mousedown` or `touchstart` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n### dragMove\n\n```js\n.on( 'dragMove', function( draggieInstance, event, pointer ) { //...\n```\n\n+ `draggieInstance` - **Type:** _Draggabilly_ - the Draggabilly instance\n+ `event` - **Type:** _Event_ - the original `mousemove` or `touchmove` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n### dragEnd\n\n```js\n.on( 'dragEnd', function( draggieInstance, event, pointer ) { //...\n```\n\n+ `draggieInstance` - **Type:** _Draggabilly_ - the Draggabilly instance\n+ `event` - **Type:** _Event_ - the original `mouseup` or `touchend` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n## Methods\n\n### disable\n\n``` js\ndraggie.disable()\n```\n\n### enable\n\n``` js\ndraggie.enable()\n```\n\n## RequireJS\n\nDraggabilly works with [RequireJS](http://require.org).\n\nYou can require [draggabilly.pkgd.js](http://draggabilly.desandro.io/draggabilly.pkgd.js).\n\n``` js\nrequirejs( [\n  'path/to/draggabilly.pkgd.js',\n], function( Draggabilly ) {\n  new Draggabilly( ... );\n});\n```\n\nOr, you can manage dependencies with [Bower](http://bower.io). Set `baseUrl` to `bower_components` and set a path config for all your application code.\n\n``` js\nrequirejs.config({\n  baseUrl: 'bower_components/',\n  paths: { // path your your app\n    app: '../'\n  }\n});\n\nrequirejs( [\n  'draggabilly/draggabilly',\n  'app/my-component.js'\n], function( Draggabilly, myComp ) {\n  new Draggabilly( ... );\n});\n```\n\n## License\n\nDraggabilly is released under the [MIT License](http://desandro.mit-license.org/). Have at it.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/desandro/draggabilly/issues"
  },
  "_id": "draggabilly@1.1.1",
  "_from": "draggabilly@"
}
